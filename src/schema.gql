# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

type Facility {
  createdAt: DateTime!
  description: String!
  id: String!
  images: [Image!]
  name: String!
  updatedAt: DateTime!
}

input FacilityCreateInput {
  createdAt: DateTime
  description: String!
  id: String
  images: ImageCreateNestedManyWithoutFacilityInput
  name: String!
  updatedAt: DateTime
}

input FacilityCreateNestedOneWithoutImagesInput {
  connect: FacilityWhereUniqueInput
  connectOrCreate: FacilityCreateOrConnectWithoutImagesInput
  create: FacilityCreateWithoutImagesInput
}

input FacilityCreateOrConnectWithoutImagesInput {
  create: FacilityCreateWithoutImagesInput!
  where: FacilityWhereUniqueInput!
}

input FacilityCreateWithoutImagesInput {
  createdAt: DateTime
  description: String!
  id: String
  name: String!
  updatedAt: DateTime
}

input FacilityOrderByWithRelationInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  images: ImageOrderByRelationAggregateInput
  name: SortOrder
  updatedAt: SortOrder
}

input FacilityRelationFilter {
  is: FacilityWhereInput
  isNot: FacilityWhereInput
}

input FacilityUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutFacilityNestedInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FacilityUpdateOneWithoutImagesNestedInput {
  connect: FacilityWhereUniqueInput
  connectOrCreate: FacilityCreateOrConnectWithoutImagesInput
  create: FacilityCreateWithoutImagesInput
  delete: Boolean
  disconnect: Boolean
  update: FacilityUpdateWithoutImagesInput
  upsert: FacilityUpsertWithoutImagesInput
}

input FacilityUpdateWithoutImagesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FacilityUpsertWithoutImagesInput {
  create: FacilityCreateWithoutImagesInput!
  update: FacilityUpdateWithoutImagesInput!
}

input FacilityWhereInput {
  AND: [FacilityWhereInput!]
  NOT: [FacilityWhereInput!]
  OR: [FacilityWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  images: ImageListRelationFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input FacilityWhereUniqueInput {
  id: String
}

input GetFacilityArgs {
  cursor: FacilityWhereUniqueInput
  orderBy: FacilityOrderByWithRelationInput
  skip: Int
  take: Int
  where: FacilityWhereInput
}

input GetHorseArgs {
  cursor: HorseWhereUniqueInput
  orderBy: HorseOrderByWithRelationInput
  skip: Int
  take: Int
  where: HorseWhereInput
}

input GetHorseCategoriesArgs {
  cursor: HorseCategoryWhereUniqueInput
  orderBy: HorseCategoryOrderByWithRelationInput
  skip: Int
  take: Int
  where: HorseCategoryWhereInput
}

input GetHorseColorsArgs {
  cursor: HorseColorWhereUniqueInput
  orderBy: HorseColorOrderByWithRelationInput
  skip: Int
  take: Int
  where: HorseColorWhereInput
}

input GetHorseGendersArgs {
  cursor: HorseGenderWhereUniqueInput
  orderBy: HorseGenderOrderByWithRelationInput
  skip: Int
  take: Int
  where: HorseGenderWhereInput
}

input GetImagesArgs {
  cursor: ImageWhereUniqueInput
  orderBy: ImageOrderByWithRelationInput
  skip: Int
  take: Int
  where: ImageWhereInput
}

input GetPartnersArgs {
  cursor: PartnerWhereUniqueInput
  orderBy: PartnerOrderByWithRelationInput
  skip: Int
  take: Int
  where: PartnerWhereInput
}

type Horse {
  after: String!
  birthyear: String!
  category: String!
  color: String!
  createdAt: DateTime!
  gender: String!
  id: String!
  images: [Image!]
  name: String!
  nickname: String!
  owner: String!
  updatedAt: DateTime!
}

type HorseCategory {
  category: String!
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
}

input HorseCategoryCreateInput {
  category: String!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input HorseCategoryOrderByWithRelationInput {
  category: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input HorseCategoryWhereInput {
  AND: [HorseCategoryWhereInput!]
  NOT: [HorseCategoryWhereInput!]
  OR: [HorseCategoryWhereInput!]
  category: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
}

input HorseCategoryWhereUniqueInput {
  id: String
}

type HorseColor {
  color: String!
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
}

input HorseColorCreateInput {
  color: String!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input HorseColorOrderByWithRelationInput {
  color: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input HorseColorWhereInput {
  AND: [HorseColorWhereInput!]
  NOT: [HorseColorWhereInput!]
  OR: [HorseColorWhereInput!]
  color: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
}

input HorseColorWhereUniqueInput {
  id: String
}

input HorseCreateInput {
  after: String!
  birthyear: String!
  category: String!
  color: String!
  createdAt: DateTime
  gender: String!
  id: String
  images: ImageCreateNestedManyWithoutHorseInput
  name: String!
  nickname: String!
  owner: String!
  updatedAt: DateTime
}

input HorseCreateNestedOneWithoutImagesInput {
  connect: HorseWhereUniqueInput
  connectOrCreate: HorseCreateOrConnectWithoutImagesInput
  create: HorseCreateWithoutImagesInput
}

input HorseCreateOrConnectWithoutImagesInput {
  create: HorseCreateWithoutImagesInput!
  where: HorseWhereUniqueInput!
}

input HorseCreateWithoutImagesInput {
  after: String!
  birthyear: String!
  category: String!
  color: String!
  createdAt: DateTime
  gender: String!
  id: String
  name: String!
  nickname: String!
  owner: String!
  updatedAt: DateTime
}

type HorseGender {
  createdAt: DateTime!
  gender: String!
  id: String!
  updatedAt: DateTime!
}

input HorseGenderCreateInput {
  createdAt: DateTime
  gender: String!
  id: String
  updatedAt: DateTime
}

input HorseGenderOrderByWithRelationInput {
  createdAt: SortOrder
  gender: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input HorseGenderWhereInput {
  AND: [HorseGenderWhereInput!]
  NOT: [HorseGenderWhereInput!]
  OR: [HorseGenderWhereInput!]
  createdAt: DateTimeFilter
  gender: StringFilter
  id: StringFilter
  updatedAt: DateTimeFilter
}

input HorseGenderWhereUniqueInput {
  id: String
}

input HorseOrderByWithRelationInput {
  after: SortOrder
  birthyear: SortOrder
  category: SortOrder
  color: SortOrder
  createdAt: SortOrder
  gender: SortOrder
  id: SortOrder
  images: ImageOrderByRelationAggregateInput
  name: SortOrder
  nickname: SortOrder
  owner: SortOrder
  updatedAt: SortOrder
}

input HorseRelationFilter {
  is: HorseWhereInput
  isNot: HorseWhereInput
}

input HorseUpdateInput {
  after: StringFieldUpdateOperationsInput
  birthyear: StringFieldUpdateOperationsInput
  category: StringFieldUpdateOperationsInput
  color: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  gender: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutHorseNestedInput
  name: StringFieldUpdateOperationsInput
  nickname: StringFieldUpdateOperationsInput
  owner: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input HorseUpdateOneWithoutImagesNestedInput {
  connect: HorseWhereUniqueInput
  connectOrCreate: HorseCreateOrConnectWithoutImagesInput
  create: HorseCreateWithoutImagesInput
  delete: Boolean
  disconnect: Boolean
  update: HorseUpdateWithoutImagesInput
  upsert: HorseUpsertWithoutImagesInput
}

input HorseUpdateWithoutImagesInput {
  after: StringFieldUpdateOperationsInput
  birthyear: StringFieldUpdateOperationsInput
  category: StringFieldUpdateOperationsInput
  color: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  gender: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  nickname: StringFieldUpdateOperationsInput
  owner: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input HorseUpsertWithoutImagesInput {
  create: HorseCreateWithoutImagesInput!
  update: HorseUpdateWithoutImagesInput!
}

input HorseWhereInput {
  AND: [HorseWhereInput!]
  NOT: [HorseWhereInput!]
  OR: [HorseWhereInput!]
  after: StringFilter
  birthyear: StringFilter
  category: StringFilter
  color: StringFilter
  createdAt: DateTimeFilter
  gender: StringFilter
  id: StringFilter
  images: ImageListRelationFilter
  name: StringFilter
  nickname: StringFilter
  owner: StringFilter
  updatedAt: DateTimeFilter
}

input HorseWhereUniqueInput {
  id: String
}

type Image {
  createdAt: DateTime!
  facility: Facility
  fileId: String!
  horse: Horse
  id: String!
  partner: Partner
  profile: Boolean!
  updatedAt: DateTime!
  url: String!
}

input ImageCreateInput {
  createdAt: DateTime
  facility: FacilityCreateNestedOneWithoutImagesInput
  fileId: String!
  horse: HorseCreateNestedOneWithoutImagesInput
  id: String
  partner: PartnerCreateNestedOneWithoutImageInput
  profile: Boolean
  updatedAt: DateTime
  url: String!
}

input ImageCreateManyFacilityInput {
  createdAt: DateTime
  fileId: String!
  horseId: String
  id: String
  profile: Boolean
  updatedAt: DateTime
  url: String!
}

input ImageCreateManyFacilityInputEnvelope {
  data: [ImageCreateManyFacilityInput!]!
  skipDuplicates: Boolean
}

input ImageCreateManyHorseInput {
  createdAt: DateTime
  facilityId: String
  fileId: String!
  id: String
  profile: Boolean
  updatedAt: DateTime
  url: String!
}

input ImageCreateManyHorseInputEnvelope {
  data: [ImageCreateManyHorseInput!]!
  skipDuplicates: Boolean
}

input ImageCreateNestedManyWithoutFacilityInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutFacilityInput!]
  create: [ImageCreateWithoutFacilityInput!]
  createMany: ImageCreateManyFacilityInputEnvelope
}

input ImageCreateNestedManyWithoutHorseInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutHorseInput!]
  create: [ImageCreateWithoutHorseInput!]
  createMany: ImageCreateManyHorseInputEnvelope
}

input ImageCreateNestedOneWithoutPartnerInput {
  connect: ImageWhereUniqueInput
  connectOrCreate: ImageCreateOrConnectWithoutPartnerInput
  create: ImageCreateWithoutPartnerInput
}

input ImageCreateOrConnectWithoutFacilityInput {
  create: ImageCreateWithoutFacilityInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateOrConnectWithoutHorseInput {
  create: ImageCreateWithoutHorseInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateOrConnectWithoutPartnerInput {
  create: ImageCreateWithoutPartnerInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateWithoutFacilityInput {
  createdAt: DateTime
  fileId: String!
  horse: HorseCreateNestedOneWithoutImagesInput
  id: String
  partner: PartnerCreateNestedOneWithoutImageInput
  profile: Boolean
  updatedAt: DateTime
  url: String!
}

input ImageCreateWithoutHorseInput {
  createdAt: DateTime
  facility: FacilityCreateNestedOneWithoutImagesInput
  fileId: String!
  id: String
  partner: PartnerCreateNestedOneWithoutImageInput
  profile: Boolean
  updatedAt: DateTime
  url: String!
}

input ImageCreateWithoutPartnerInput {
  createdAt: DateTime
  facility: FacilityCreateNestedOneWithoutImagesInput
  fileId: String!
  horse: HorseCreateNestedOneWithoutImagesInput
  id: String
  profile: Boolean
  updatedAt: DateTime
  url: String!
}

input ImageListRelationFilter {
  every: ImageWhereInput
  none: ImageWhereInput
  some: ImageWhereInput
}

input ImageOrderByRelationAggregateInput {
  _count: SortOrder
}

input ImageOrderByWithRelationInput {
  createdAt: SortOrder
  facility: FacilityOrderByWithRelationInput
  facilityId: SortOrder
  fileId: SortOrder
  horse: HorseOrderByWithRelationInput
  horseId: SortOrder
  id: SortOrder
  partner: PartnerOrderByWithRelationInput
  profile: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

input ImageRelationFilter {
  is: ImageWhereInput
  isNot: ImageWhereInput
}

input ImageScalarWhereInput {
  AND: [ImageScalarWhereInput!]
  NOT: [ImageScalarWhereInput!]
  OR: [ImageScalarWhereInput!]
  createdAt: DateTimeFilter
  facilityId: StringNullableFilter
  fileId: StringFilter
  horseId: StringNullableFilter
  id: StringFilter
  profile: BoolFilter
  updatedAt: DateTimeFilter
  url: StringFilter
}

input ImageUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  facility: FacilityUpdateOneWithoutImagesNestedInput
  fileId: StringFieldUpdateOperationsInput
  horse: HorseUpdateOneWithoutImagesNestedInput
  id: StringFieldUpdateOperationsInput
  partner: PartnerUpdateOneWithoutImageNestedInput
  profile: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  fileId: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  profile: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUpdateManyWithWhereWithoutFacilityInput {
  data: ImageUpdateManyMutationInput!
  where: ImageScalarWhereInput!
}

input ImageUpdateManyWithWhereWithoutHorseInput {
  data: ImageUpdateManyMutationInput!
  where: ImageScalarWhereInput!
}

input ImageUpdateManyWithoutFacilityNestedInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutFacilityInput!]
  create: [ImageCreateWithoutFacilityInput!]
  createMany: ImageCreateManyFacilityInputEnvelope
  delete: [ImageWhereUniqueInput!]
  deleteMany: [ImageScalarWhereInput!]
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithWhereUniqueWithoutFacilityInput!]
  updateMany: [ImageUpdateManyWithWhereWithoutFacilityInput!]
  upsert: [ImageUpsertWithWhereUniqueWithoutFacilityInput!]
}

input ImageUpdateManyWithoutHorseNestedInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutHorseInput!]
  create: [ImageCreateWithoutHorseInput!]
  createMany: ImageCreateManyHorseInputEnvelope
  delete: [ImageWhereUniqueInput!]
  deleteMany: [ImageScalarWhereInput!]
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithWhereUniqueWithoutHorseInput!]
  updateMany: [ImageUpdateManyWithWhereWithoutHorseInput!]
  upsert: [ImageUpsertWithWhereUniqueWithoutHorseInput!]
}

input ImageUpdateOneWithoutPartnerNestedInput {
  connect: ImageWhereUniqueInput
  connectOrCreate: ImageCreateOrConnectWithoutPartnerInput
  create: ImageCreateWithoutPartnerInput
  delete: Boolean
  disconnect: Boolean
  update: ImageUpdateWithoutPartnerInput
  upsert: ImageUpsertWithoutPartnerInput
}

input ImageUpdateWithWhereUniqueWithoutFacilityInput {
  data: ImageUpdateWithoutFacilityInput!
  where: ImageWhereUniqueInput!
}

input ImageUpdateWithWhereUniqueWithoutHorseInput {
  data: ImageUpdateWithoutHorseInput!
  where: ImageWhereUniqueInput!
}

input ImageUpdateWithoutFacilityInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  fileId: StringFieldUpdateOperationsInput
  horse: HorseUpdateOneWithoutImagesNestedInput
  id: StringFieldUpdateOperationsInput
  partner: PartnerUpdateOneWithoutImageNestedInput
  profile: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUpdateWithoutHorseInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  facility: FacilityUpdateOneWithoutImagesNestedInput
  fileId: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  partner: PartnerUpdateOneWithoutImageNestedInput
  profile: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUpdateWithoutPartnerInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  facility: FacilityUpdateOneWithoutImagesNestedInput
  fileId: StringFieldUpdateOperationsInput
  horse: HorseUpdateOneWithoutImagesNestedInput
  id: StringFieldUpdateOperationsInput
  profile: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUpsertWithWhereUniqueWithoutFacilityInput {
  create: ImageCreateWithoutFacilityInput!
  update: ImageUpdateWithoutFacilityInput!
  where: ImageWhereUniqueInput!
}

input ImageUpsertWithWhereUniqueWithoutHorseInput {
  create: ImageCreateWithoutHorseInput!
  update: ImageUpdateWithoutHorseInput!
  where: ImageWhereUniqueInput!
}

input ImageUpsertWithoutPartnerInput {
  create: ImageCreateWithoutPartnerInput!
  update: ImageUpdateWithoutPartnerInput!
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  createdAt: DateTimeFilter
  facility: FacilityRelationFilter
  facilityId: StringNullableFilter
  fileId: StringFilter
  horse: HorseRelationFilter
  horseId: StringNullableFilter
  id: StringFilter
  partner: PartnerRelationFilter
  profile: BoolFilter
  updatedAt: DateTimeFilter
  url: StringFilter
}

input ImageWhereUniqueInput {
  id: String
}

type Mutation {
  createCategory(HorseCategoryCreateInput: HorseCategoryCreateInput!): HorseCategory!
  createColor(HorseColorCreateInput: HorseColorCreateInput!): HorseColor!
  createFacility(FacilityCreateInput: FacilityCreateInput!): Facility!
  createGender(HorseGenderCreateInput: HorseGenderCreateInput!): HorseGender!
  createHorse(HorseCreateInput: HorseCreateInput!): Horse!
  createImage(ImageCreateInput: ImageCreateInput!): Image!
  createPartner(PartnerCreateInput: PartnerCreateInput!): Partner!
  deleteAllFacilitys: Int
  deleteAllImages: Int
  deleteAllPartners: Int
  deleteCategory(HorseCategoryWhereUniqueInput: HorseCategoryWhereUniqueInput!): HorseCategory!
  deleteColor(HorseColorWhereUniqueInput: HorseColorWhereUniqueInput!): HorseColor!
  deleteFacility(FacilityWhereUniqueInput: FacilityWhereUniqueInput!): Facility
  deleteGender(HorseGenderWhereUniqueInput: HorseGenderWhereUniqueInput!): HorseGender!
  deleteHorse(HorseWhereUniqueInput: HorseWhereUniqueInput!): Horse!
  deleteImage(ImageWhereUniqueInput: ImageWhereUniqueInput!): Image
  deletePartner(PartnerWhereUniqueInput: PartnerWhereUniqueInput!): Partner
  setProfile(FacilityWhereUniqueInput: FacilityWhereUniqueInput, HorseWhereUniqueInput: HorseWhereUniqueInput, ImageWhereUniqueInput: ImageWhereUniqueInput!, PartnerWhereUniqueInput: PartnerWhereUniqueInput): Image!
  updateFacility(FacilityUpdateInput: FacilityUpdateInput!, FacilityWhereUnique: FacilityWhereUniqueInput!): Facility!
  updateHorse(HorseUpdateInput: HorseUpdateInput!, HorseWhereUnique: HorseWhereUniqueInput!): Horse!
  updateImage(ImageUpdateInput: ImageUpdateInput!, ImageWhereUnique: ImageWhereUniqueInput!): Image!
  updatePartner(PartnerUpdateInput: PartnerUpdateInput!, PartnerWhereUnique: PartnerWhereUniqueInput!): Partner!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Partner {
  createdAt: DateTime!
  description: String!
  id: String
  image: Image
  name: String!
  updatedAt: DateTime!
  website: String
}

input PartnerCreateInput {
  createdAt: DateTime
  description: String!
  id: String
  image: ImageCreateNestedOneWithoutPartnerInput
  name: String!
  updatedAt: DateTime
  website: String!
}

input PartnerCreateNestedOneWithoutImageInput {
  connect: PartnerWhereUniqueInput
  connectOrCreate: PartnerCreateOrConnectWithoutImageInput
  create: PartnerCreateWithoutImageInput
}

input PartnerCreateOrConnectWithoutImageInput {
  create: PartnerCreateWithoutImageInput!
  where: PartnerWhereUniqueInput!
}

input PartnerCreateWithoutImageInput {
  createdAt: DateTime
  description: String!
  id: String
  name: String!
  updatedAt: DateTime
  website: String!
}

input PartnerOrderByWithRelationInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  image: ImageOrderByWithRelationInput
  imageId: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  website: SortOrder
}

input PartnerRelationFilter {
  is: PartnerWhereInput
  isNot: PartnerWhereInput
}

input PartnerUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: ImageUpdateOneWithoutPartnerNestedInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: StringFieldUpdateOperationsInput
}

input PartnerUpdateOneWithoutImageNestedInput {
  connect: PartnerWhereUniqueInput
  connectOrCreate: PartnerCreateOrConnectWithoutImageInput
  create: PartnerCreateWithoutImageInput
  delete: Boolean
  disconnect: Boolean
  update: PartnerUpdateWithoutImageInput
  upsert: PartnerUpsertWithoutImageInput
}

input PartnerUpdateWithoutImageInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: StringFieldUpdateOperationsInput
}

input PartnerUpsertWithoutImageInput {
  create: PartnerCreateWithoutImageInput!
  update: PartnerUpdateWithoutImageInput!
}

input PartnerWhereInput {
  AND: [PartnerWhereInput!]
  NOT: [PartnerWhereInput!]
  OR: [PartnerWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  image: ImageRelationFilter
  imageId: StringNullableFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  website: StringFilter
}

input PartnerWhereUniqueInput {
  id: String
  imageId: String
}

type Query {
  getCategories(GetHorseCategorysArgs: GetHorseCategoriesArgs): [HorseCategory!]!
  getColors(GetHorseColorsArgs: GetHorseColorsArgs): [HorseColor!]!
  getFacilities(GetFacilityArgs: GetFacilityArgs): [Facility!]!
  getGenders(GetHorseGendersArgs: GetHorseGendersArgs): [HorseGender!]!
  getHorses(GetHorseArgs: GetHorseArgs): [Horse!]!
  getImages(GetImageArgs: GetImagesArgs): [Image!]!
  getPartners(GetPartnerArgs: GetPartnersArgs): [Partner!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}